package com.ventas.frame;

import com.ventas.entities.CompraClienteMercadoPago;
import com.ventas.entities.FacturaCompraReferenciaMercadoPago;
import com.ventas.entities.IvaVentas;
import com.ventas.main.MainFrame;
import com.ventas.services.FacturaCompraReferenciaMercadoPagoService;
import com.ventas.services.IvaVentasService;
import com.ventas.util.UtilFrame;
import java.awt.Rectangle;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author argia
 */
public class FacturasDeMercadoPagoFrame extends javax.swing.JFrame {

    private FacturaCompraReferenciaMercadoPago referenciaMercadoPago;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private List<IvaVentas> ivaVentas;
    private Date a;
    private Date d;
    private Integer r;

    /**
     * Creates new form FacturasDeMercadoPagoFrame
     *
     * @param d
     * @param a
     * @param r
     */
    public FacturasDeMercadoPagoFrame(Date d, Date a, Integer r) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(100, 100, 255));
        this.setExtendedState(6);
        this.d = d;
        this.a = a;
        this.r = r;
        limpiarCampos();
        if (r != null) {
            this.d = d;
            this.a = a;
            this.r = r;
            deTxt.setText(sdf.format(d));
            alTxt.setText(sdf.format(a));
            buscar();
            Rectangle rect = tabla.getCellRect(r - 1, 0, true);
            tabla.scrollRectToVisible(rect);
            tabla.clearSelection();
            tabla.setRowSelectionInterval(r - 1, r - 1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        deTxt = new javax.swing.JTextField();
        alTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        verComprobanteBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        verFacturaBtn = new javax.swing.JButton();
        excelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("FACTURAS DE VENTA CORRESPONDIENTES A TRANSFERENCIAS DE MERCADO PAGO");

        jLabel1.setText("DESDE:");

        jLabel2.setText("HASTA:");

        deTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deTxt.setText("DE");
        deTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deTxtKeyPressed(evt);
            }
        });

        alTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alTxt.setText("AL");
        alTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alTxtKeyPressed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FECHA", "NOMBRE", "CUIT", "IMPORTE", "FECHA FC", "NRO.FC", "GRAVADO", "IVA", "IMPUESTO", "TOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        volverBtn.setText("VOLVER");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        verComprobanteBtn.setText("VER COMPROBANTE");
        verComprobanteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verComprobanteBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("<<< FECHAS DE FACTURAS GENERADAS");

        verFacturaBtn.setText("VER FACTURA");
        verFacturaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verFacturaBtnActionPerformed(evt);
            }
        });

        excelBtn.setText("EXCEL");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(verFacturaBtn)
                        .addGap(18, 18, 18)
                        .addComponent(excelBtn)
                        .addGap(0, 132, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(verComprobanteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(verFacturaBtn)
                    .addComponent(excelBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(verComprobanteBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void verComprobanteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verComprobanteBtnActionPerformed
        verComprobante();
    }//GEN-LAST:event_verComprobanteBtnActionPerformed

    private void deTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = deTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                alTxt.requestFocus();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.fecha(fe);
            deTxt.setText(fe);
        }
    }//GEN-LAST:event_deTxtKeyPressed

    private void alTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = alTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                buscar();
            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.fecha(fe);
            alTxt.setText(fe);
        }
    }//GEN-LAST:event_alTxtKeyPressed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void verFacturaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verFacturaBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE UNA FACTURA PARA VER DETALLE");
            return;
        }
        IvaVentas iv = ivaVentas.get(row);
        Date de = new Date();
        Date al = new Date();
        try {
            de = sdf.parse(deTxt.getText());
            al = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(FacturasDeMercadoPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        VerComprobanteFrame vcf = new VerComprobanteFrame(iv, de, al, row, 2);
        vcf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_verFacturaBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FacturasDeMercadoPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FacturasDeMercadoPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FacturasDeMercadoPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FacturasDeMercadoPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FacturasDeMercadoPagoFrame(null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alTxt;
    private javax.swing.JTextField deTxt;
    private javax.swing.JButton excelBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JButton verComprobanteBtn;
    private javax.swing.JButton verFacturaBtn;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        deTxt.setText("");
        alTxt.setText("");
        verComprobanteBtn.setVisible(false);
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void verComprobante() {

    }

    private void buscar() {
        UtilFrame.limpiarTabla(tabla);
        if (!deTxt.getText().isEmpty()) {
            if (!alTxt.getText().isEmpty()) {
                Date de, al = new Date();
                try {
                    de = sdf.parse(deTxt.getText());
                    al = sdf.parse(alTxt.getText());
                } catch (ParseException ex) {
                    Logger.getLogger(FacturasDeMercadoPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR EN FECHAS");
                    return;
                }
                ivaVentas = null;
                try {
                    ivaVentas = new IvaVentasService().getFacturasEntreFechasOrdenNroFc(de, al);
                } catch (Exception ex) {
                    Logger.getLogger(FacturasDeMercadoPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (ivaVentas != null && !ivaVentas.isEmpty()) {
                    DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
                    for (IvaVentas iv : ivaVentas) {
                        referenciaMercadoPago = null;
                        CompraClienteMercadoPago ccmp;
                        try {
                            referenciaMercadoPago = new FacturaCompraReferenciaMercadoPagoService()
                                    .getFacturaByIvaVentas(iv);
                        } catch (Exception ex) {
                            Logger.getLogger(FacturasDeMercadoPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Date fechaMP = new Date();
                        String cuit = "";
                        String nombre = "";
                        Double importeMP = 0.0;
                        if (referenciaMercadoPago != null) {
                            fechaMP = referenciaMercadoPago.getCompraClienteMercadoPago().getFecha();
                            cuit = referenciaMercadoPago.getCompraClienteMercadoPago().getCuit();
                            nombre = referenciaMercadoPago.getCompraClienteMercadoPago().getNombre();
                            importeMP = referenciaMercadoPago.getCompraClienteMercadoPago().getImporte();
                        }
                        Date fechaFcVenta = iv.getFecha();
                        String nroFc = iv.getLetra() + " " + iv.getNumeroSucursal() + "-" + iv.getNumeroFactura();
                        Double gravado = iv.getGravado();
                        Double impuesto = iv.getImpuesto();
                        Double iva = iv.getIva();
                        Double totalFc = iv.getTotal();
                        Object o[] = new Object[10];
                        if (referenciaMercadoPago != null) {
                            o[0] = sdf.format(fechaMP);
                            o[1] = nombre;
                            o[2] = cuit;
                            o[3] = df.format(importeMP);
                        }
                        o[4] = sdf.format(fechaFcVenta);
                        o[5] = nroFc;
                        o[6] = df.format(gravado);
                        o[7] = df.format(impuesto);
                        o[8] = df.format(iva);
                        o[9] = df.format(totalFc);
                        tbl.addRow(o);
                    }
                    tabla.setModel(tbl);
                }
            }
        }
    }

    private void excel() {
        String fech = sdf2.format(new Date());
        String rutaArchivo = "d:/ventasJo/data/excel/facturas_MP_" + fech + ".xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "ERROR Nro. 417");
            return;
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "ERROR Nro. 427");
            return;
        }
        WritableSheet hoja1 = libro.createSheet("FACTURAS MP", 0);
        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "BELSITO JONATHAN MAXIMILIANO"));
            hoja1.addCell(new jxl.write.Label(0, 1, "FECHA MP"));
            hoja1.addCell(new jxl.write.Label(1, 1, "RAZON SOCIAL"));
            hoja1.addCell(new jxl.write.Label(2, 1, "CUIT"));
            hoja1.addCell(new jxl.write.Label(3, 1, "IMPORTE MP"));
            hoja1.addCell(new jxl.write.Label(4, 1, "FECHA FC"));
            hoja1.addCell(new jxl.write.Label(5, 1, "NUMERO FC"));
            hoja1.addCell(new jxl.write.Label(6, 1, "NETO GRAVADO"));
            hoja1.addCell(new jxl.write.Label(7, 1, "IVA"));
            hoja1.addCell(new jxl.write.Label(8, 1, "IMPUESTO"));
            hoja1.addCell(new jxl.write.Label(9, 1, "TOTAL"));
            int y = 2;
            Double tgG = 0.0;
            Double tgIv = 0.0;
            Double tgIm = 0.0;
            Double tgTt = 0.0;
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (IvaVentas i : ivaVentas) {
                String nroFc = i.getLetra() + " " + i.getNumeroSucursal() + "-" + i.getNumeroFactura();
                tgG += i.getGravado();
                tgIm += i.getImpuesto();
                tgIv += i.getIva();
                tgTt += i.getTotal();
                if (!tbl.getValueAt(y - 2, 0).toString().isEmpty()) {
                    String fechaMp = tbl.getValueAt(y - 2, 0).toString();
                    Double importeMp = Double.valueOf(tbl.getValueAt(y - 2, 0).toString());
                    hoja1.addCell(new jxl.write.Label(0, y, fechaMp));
                    hoja1.addCell(new jxl.write.Label(1, y, i.getCliente().getRazonSocial()));
                    hoja1.addCell(new jxl.write.Label(2, y, i.getCliente().getCuit()));
                    hoja1.addCell(new jxl.write.Number(3, y, importeMp));
                }
                hoja1.addCell(new jxl.write.Label(4, y, sdf.format(i.getFecha())));
                hoja1.addCell(new jxl.write.Label(5, y, nroFc));
                hoja1.addCell(new jxl.write.Number(6, y, i.getGravado()));
                hoja1.addCell(new jxl.write.Number(7, y, i.getIva()));
                hoja1.addCell(new jxl.write.Number(8, y, i.getImpuesto()));
                hoja1.addCell(new jxl.write.Number(9, y, i.getTotal()));
            }
            hoja1.addCell(new jxl.write.Label(1, y + 1, "TOTALES"));
            hoja1.addCell(new jxl.write.Number(6, y + 1, tgG));
            hoja1.addCell(new jxl.write.Number(7, y + 1, tgIv));
            hoja1.addCell(new jxl.write.Number(8, y + 1, tgIm));
            hoja1.addCell(new jxl.write.Number(9, y + 1, tgTt));
        } catch (WriteException ex) {
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error: 483");
            return;
        } catch (WriteException ex) {
            JOptionPane.showMessageDialog(this, "Error: 484");
            return;
        }
        JOptionPane.showMessageDialog(this, "Excel creado correctamente");
        JOptionPane.showMessageDialog(this, "LO ENCUENTRA EN d:/ventasJo/data/excel/facturas_MP");
    }
}
