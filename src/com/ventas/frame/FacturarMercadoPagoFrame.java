package com.ventas.frame;

import com.ventas.entities.ArticuloCompra;
import com.ventas.entities.CalculoFactura;
import com.ventas.entities.Cliente;
import com.ventas.entities.CompraClienteMercadoPago;
import com.ventas.entities.FacturaCompraReferenciaMercadoPago;
import com.ventas.entities.FacturaIvaIntercambio;
import com.ventas.entities.IvaVentas;
import com.ventas.entities.RenglonFactura;
import com.ventas.main.MainFrame;
import com.ventas.services.ArticuloCompraService;
import com.ventas.services.ClienteService;
import com.ventas.services.CompraClienteMercadoPagoService;
import com.ventas.services.FacturaService;
import com.ventas.services.IvaVentasService;
import com.ventas.util.Constantes;
import com.ventas.util.UtilFrame;
import com.ventas.util.UtilAfip;
import com.ventas.util.UtilFactura;
import static java.lang.Thread.sleep;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author argia
 */
public class FacturarMercadoPagoFrame extends javax.swing.JFrame {

    private DecimalFormat df = new DecimalFormat("#0.00");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private List<CompraClienteMercadoPago> comprasMp = null;
    private CompraClienteMercadoPago compraMp;
    private List<ArticuloCompra> facturas = null;
    List<CalculoFactura> nuevasFacturas;
//    private Integer contadorFacturas = 0;
//    private Integer contadorCompras = 0;
    private Date fechaFacturas;
//    private List<ArticuloCompra> articulos;
    private final int tst = 0; // 1 esta en test

    /**
     * Creates new form FacturasMercadoPagoFrame
     */
    public FacturarMercadoPagoFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(100, 100, 255));
        this.setLocationRelativeTo(null);
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ultimaFechaTxt = new javax.swing.JTextField();
        fechaTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        procesarBtn = new javax.swing.JButton();
        presentarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        segDeTxt = new javax.swing.JTextField();
        segAlTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("FACTURACION MERCADO PAGO");

        jLabel1.setText("FECHA FACTURAS:");

        jLabel2.setText("ULTIMA FECHA SISTEMA:");

        ultimaFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ultimaFechaTxt.setText("ULT.FECHA");

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");
        fechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaTxtKeyPressed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CUIT", "NOMBRE", "TOTAL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(100);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(300);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(70);
        }

        procesarBtn.setText("CARGAR");
        procesarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                procesarBtnActionPerformed(evt);
            }
        });
        procesarBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                procesarBtnKeyPressed(evt);
            }
        });

        presentarBtn.setText("PRESENTAR");
        presentarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presentarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("VOLVER");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("SEGUNDOS ENTRE FC:");

        segDeTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        segDeTxt.setText("SEG");

        segAlTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        segAlTxt.setText("SEG");

        jLabel3.setText("TABACALERA:");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });
        combo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 847, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ultimaFechaTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                            .addComponent(fechaTxt))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(procesarBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(presentarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(segDeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(segAlTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ultimaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(procesarBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(presentarBtn)
                    .addComponent(volverBtn)
                    .addComponent(jLabel4)
                    .addComponent(segDeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(segAlTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            String fe = fechaTxt.getText();
            int largo = fe.length();
            if (largo == 10) {
                try {
                    fechaFacturas = sdf.parse(fe);
                    if (verificarFecha(fechaFacturas)) {
                        combo.addFocusListener(null);
                        combo.showPopup();
                        combo.requestFocus();
                    }
                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(this, "ERROR EN FECHA");
                    fechaTxt.requestFocus();
                    return;
                }

            } else {
                if (largo > 10) {
                    JOptionPane.showMessageDialog(this, "ERROR EN LARGO DE FECHA");
                    return;
                }
            }
            fe = UtilFrame.fecha(fe);
            fechaTxt.setText(fe);
        }
    }//GEN-LAST:event_fechaTxtKeyPressed

    private void procesarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_procesarBtnActionPerformed
        calcular();
    }//GEN-LAST:event_procesarBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void presentarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presentarBtnActionPerformed
        int row = combo.getSelectedIndex();
        if (row > 0) {
            presentar();
            volver();
        }
    }//GEN-LAST:event_presentarBtnActionPerformed

    private void procesarBtnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_procesarBtnKeyPressed
        if (evt.getKeyCode() == 10) {
            calcular();
        }
    }//GEN-LAST:event_procesarBtnKeyPressed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        if(evt.getModifiers()==16){
            int row = combo.getSelectedIndex();
            if(row > 0){
                procesarBtn.requestFocus();
            }
        }
    }//GEN-LAST:event_comboActionPerformed

    private void comboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboKeyPressed
        if(evt.getKeyCode()==10){
            int row = combo.getSelectedIndex();
            if(row > 0){
                procesarBtn.requestFocus();
            }
        }
    }//GEN-LAST:event_comboKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FacturarMercadoPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FacturarMercadoPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FacturarMercadoPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FacturarMercadoPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FacturarMercadoPagoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton presentarBtn;
    private javax.swing.JButton procesarBtn;
    private javax.swing.JTextField segAlTxt;
    private javax.swing.JTextField segDeTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField ultimaFechaTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        String ultimaFecha = UtilFrame.ultimaFecha();
        if (ultimaFecha != null) {
            ultimaFechaTxt.setText(ultimaFecha);
        } else {
            ultimaFechaTxt.setText("01-01-2020");
        }
        fechaTxt.setText("");
        fechaTxt.requestFocus();
        segDeTxt.setText("10");
        segAlTxt.setText("55");
        combo.removeAllItems();
        combo.addItem("");
        facturas = null;
        try {
            facturas = new ArticuloCompraService().getAllArticulosActivos();
            for (ArticuloCompra ac : facturas) {
                combo.addItem(ac.getProducto().getDetalle() + " - $" + df.format(ac.getTotal()));
            }
        } catch (Exception ex) {
            Logger.getLogger(FacturarMercadoPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void calcular() {
        comprasMp = null;
        UtilFrame.limpiarTabla(tabla);
        try {
            comprasMp = new CompraClienteMercadoPagoService().getAllFacturasPendientesDeProcesar();
        } catch (Exception ex) {
            Logger.getLogger(FacturarMercadoPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        llenarTabla();
    }

    private void llenarTabla() {
        if (comprasMp != null && !comprasMp.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            Double sumaDeFacturas = 0.0;
            for (CompraClienteMercadoPago ccmp : comprasMp) {
                Object o[] = new Object[3];
                o[0] = ccmp.getCuit();
                o[1] = ccmp.getNombre();
                o[2] = ccmp.getImporte();
                sumaDeFacturas += ccmp.getImporte();
                tbl.addRow(o);
            }
            Object o[] = new Object[3];
            o[0] = "";
            o[1] = "TOTAL A PROCESAR";
            o[2] = sumaDeFacturas;
            tbl.addRow(o);
            tabla.setModel(tbl);
        } else {
            JOptionPane.showMessageDialog(this, "ERROR nro. 441 - NO HAY COMPRAS DE MERCADO PAGO PENDIENTES DE FACTURAR");

        }
    }

    private void presentar() {
        int row = combo.getSelectedIndex();
        if(row < 1){
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR TABACALERA");
            return;
        }
//        try {
//            facturas = new ArticuloCompraService().getAllArticulosActivos();
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this, "ERROR 455");
//            return;
//        }
        if (facturas != null && !facturas.isEmpty()) {
            ArticuloCompra factura = facturas.get(row -1);
            if (comprasMp != null && !comprasMp.isEmpty()) {
                nuevasFacturas = new ArrayList<>();
//                JOptionPane.showMessageDialog(this, "GENERAR NUEVAS FACTURAS");
                presentarSinSaldos(factura);
            } else {
                JOptionPane.showMessageDialog(this, "ERROR NO HAY PAGOS MERCADO PAGO PARA PROCESAR");
            }
        } else {
            JOptionPane.showMessageDialog(this, "NO HAY FACTURAS CARGADAS DISPONIBLES PARA CALCULAR LOS IMPUESTO");
        }
    }

    private Boolean verificarFecha(Date fecha) {
        Date hoy = new Date();
        if (fecha.after(hoy)) {
            JOptionPane.showMessageDialog(this, "NO PUEDE FACTURAR CON FECHA POSTERIOR A HOY");
            fechaTxt.requestFocus();
            return false;
        }
        try {
            Date ultimaFecha = sdf.parse(ultimaFechaTxt.getText());
            if (fecha.before(ultimaFecha)) {
                JOptionPane.showMessageDialog(this, "NO PUEDE FACTURAR CON FECHA ANTERIOR A ULTIMA");
                fechaTxt.requestFocus();
                return false;
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "ERROR EN FECHAS");
            fechaTxt.requestFocus();
            return false;
        }
        return true;
    }

    private void presentarSinSaldos(ArticuloCompra factura) {
        int a = JOptionPane.showConfirmDialog(this, "VERIFICO LA FECHA DE LAS FACTURAS???", "Atención",
                JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            int tim1 = Integer.valueOf(segDeTxt.getText());
            int tim2 = Integer.valueOf(segAlTxt.getText());

            String cuitTitular = Constantes.cuitTitular;
            String tipoDocTit = Constantes.tipoDocTit;
            String puntoVenta = Constantes.puntoVenta;
            nuevasFacturas = calcularTotalMp(factura); //calcularSinFacturas(limiteFacturar);
            if (nuevasFacturas != null && !nuevasFacturas.isEmpty()) {
                for (CalculoFactura ccmp : nuevasFacturas) {
//                    System.out.println(ccmp.getArticulo().getProducto().getDetalle());
//                    System.out.println(ccmp.getCuitCliente());
//                    System.out.println(ccmp.getGravado());
//                    System.out.println(ccmp.getTotal());

                    String cuit_cliente = ccmp.getCuitCliente();
                    Cliente cliente;
                    try {
                        cliente = new ClienteService().getClienteByCuit(cuit_cliente);
                        if (cliente == null) {
                            JOptionPane.showMessageDialog(this, "ERROR nro. 669 - LEYENDO CLIENTE");
                            return;
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "ERROR nro. 669 - LEYENDO CLIENTE");
                        return;
                    }
                    String pri = cuit_cliente.substring(0, 2);
                    String med = cuit_cliente.substring(3, 11);
                    String fin = cuit_cliente.substring(12, 13);
                    String cuitCliente = pri + med + fin;
//                    System.out.println(cuitCliente);
//                    System.out.println(cliente);
//                    System.out.println(cliente.getTipo());

                    String tipoDocCli = cliente.getTipo();
                    if (!segDeTxt.getText().isEmpty()) {
                        if ((!segAlTxt.getText().isEmpty())) {
                            int tim = 0;
                            FacturaIvaIntercambio fii;
                            do {
                                Random rnd = new Random();
                                Double segu = rnd.nextDouble() * (tim2 + 1);
                                tim = segu.intValue();
                            } while (tim < tim1 || tim > tim2);
                            try {
                                sleep(tim * 1000);
                            } catch (InterruptedException ex) {
                                JOptionPane.showMessageDialog(this, "ERR. con frecuencia de facturas");
                                continue;
                            }
                            if (tst == 0) {
                                fii = UtilAfip.presentarAfip(cuitTitular, tipoDocTit, cuitCliente,
                                        tipoDocCli, ccmp.getGravado(), ccmp.getImpuesto(), ccmp.getIva(),
                                        ccmp.getTotal(), fechaFacturas, puntoVenta);
                            } else {
                                fii = new FacturaIvaIntercambio();
                                fii.setCae(123456789012345L);
                                fii.setEstado("A");
                                fii.setFecha(fechaFacturas);
                                fii.setFechaVencimientoCae(fechaFacturas);
                                fii.setLetra("B");
                                Integer nroFc;
                                try {
                                    nroFc = new IvaVentasService().getUltimoNumeroFactura();
                                } catch (Exception ex) {
                                    nroFc = 0;
                                }
                                fii.setNumero(nroFc + 1);
                                fii.setSucursal(2);
                            }
                            if (fii != null) {
                                RenglonFactura rf = new RenglonFactura();
                                List<RenglonFactura> listaRf = new ArrayList<>();
                                rf.setCantidad(1F);
                                rf.setCostoG(0.0);
                                rf.setCostoI(0.0);
                                rf.setDescripcion(ccmp.getProducto().getDetalle());
                                rf.setDescuento(0.0);
                                rf.setExento(0.0);
                                rf.setFabricacion(false);
                                rf.setGravado(ccmp.getGravado());
                                rf.setGravado0(0.0);
                                rf.setGravado10_5(0.0);
                                rf.setGravado27(0.0);
                                rf.setImpuesto(ccmp.getImpuesto());
                                rf.setItemNro(1);
                                rf.setIva(ccmp.getIva());
                                rf.setIva0(0.0);
                                rf.setIva10_5(0.0);
                                rf.setIva27(0.0);
                                rf.setNoGravado(0.0);
                                rf.setProducto(ccmp.getProducto());
                                rf.setSugerido(0.0);
                                rf.setTotal(ccmp.getTotal());
                                IvaVentas iv = new IvaVentas();
                                iv.setCae(fii.getCae());
                                iv.setCliente(cliente);
                                iv.setDescuentoGlobal(0.0);
                                iv.setExento(0.0);
                                iv.setFecha(fechaFacturas);
                                iv.setFechaCae(fii.getFechaVencimientoCae());
                                iv.setGravado(ccmp.getGravado());
                                iv.setGravado0(0.0);
                                iv.setGravado10_5(0.0);
                                iv.setGravado27(0.0);
                                iv.setImpuesto(ccmp.getImpuesto());
                                iv.setIva(ccmp.getIva());
                                iv.setIva0(0.0);
                                iv.setIva10_5(0.0);
                                iv.setIva27(0.0);
                                iv.setLetra(fii.getLetra());
                                iv.setLetraReferencia("x");
                                iv.setNoGravado(0.0);
                                iv.setNumeroFactura(fii.getNumero());
                                iv.setNumeroFacturaReferencia(0);
                                iv.setNumeroSucursal(fii.getSucursal());
                                iv.setNumeroSucursalReferencia(0);
                                iv.setTipoDoc(6);
                                iv.setTotal(ccmp.getTotal());
                                rf.setIvaVentas(iv);
                                listaRf.add(rf);
                                ArticuloCompra artCmpr = ccmp.getArticulo();
                                artCmpr.setGravado(artCmpr.getGravado() - iv.getGravado());
                                artCmpr.setImpuesto(artCmpr.getImpuesto() - iv.getImpuesto());
                                artCmpr.setIva(artCmpr.getIva() - iv.getIva());
                                artCmpr.setTotal(artCmpr.getTotal() - iv.getTotal());
                                CompraClienteMercadoPago ccmpProceso = ccmp.getCompraMercadoPago();
                                ccmpProceso.setProcesado(true);
                                FacturaCompraReferenciaMercadoPago fcrmp = new FacturaCompraReferenciaMercadoPago();
                                fcrmp.setArticuloCompra(artCmpr);
                                fcrmp.setCompraClienteMercadoPago(compraMp);
                                fcrmp.setIvaVentas(iv);
                                try {
                                    new FacturaService().saveFacturaCompleta(iv, listaRf,
                                            artCmpr, ccmpProceso, fcrmp);
                                } catch (Exception ex) {
                                    JOptionPane.showMessageDialog(this, "ERROR 789");
                                    break;
                                }
//                                new CompraClienteMercadoPagoService().saveCompraClientesImportados(comprasMp);
                            } else {
                                JOptionPane.showMessageDialog(this, "ERR AFIP");
                            }
                        }
                    }

                }
            }
        }
    }

    private List<CalculoFactura> calcularTotalMp(ArticuloCompra fac) {
        List<CalculoFactura> nuevas_fc = new ArrayList<>();
        Boolean repetir = true;
        Integer contadorComprasMP = 0;
//        Integer contadorFac = 0;
        Integer ultimoCompras = comprasMp.size();
//        Integer ultimoFacturas = facturas.size();
        do {
            CompraClienteMercadoPago compra = comprasMp.get(contadorComprasMP);
//            ArticuloCompra fac = compr;
            Double importeTotal = compra.getImporte();
            CalculoFactura cf = UtilFactura.calcularTotalesAutomatico(importeTotal, fac);
            System.out.println(cf);
            if (cf != null) {
                cf.setCuitCliente(compra.getCuit());
                cf.setCompraMercadoPago(compra);
                nuevas_fc.add(cf);
//                if (fac.getTotal() < 0.00) {
////                    contadorFac += 1;
////                    if (contadorFac > ultimoFacturas - 1) {
////                        contadorFac = 0;
////                    }
//                }
                contadorComprasMP += 1;
                if (contadorComprasMP > ultimoCompras - 1) {
                    repetir = false;
                }
            } else {
                JOptionPane.showMessageDialog(this, "ERROR nro. 922 - FACTURAS COMPRA");
                repetir = false;
            }
        } while (repetir);
        System.out.println(nuevas_fc);
        return nuevas_fc;
    }
    /*
        if (comprasMp != null && !comprasMp.isEmpty()) {
            Double totalFacturas = 0.00;
            
            
            


            
                Random rnd = new Random();
                Double importeRnd = rnd.nextDouble() * (maximo + 1);
                importeRnd = importeRedondeado(importeRnd);
                if (importeRnd > minimo) {
                    
                    if (cf != null) {
                        nuevas_facturas.add(cf);
                        totalFacturas += cf.getTotal();
                    } else {
                        repetir = false;
                    }
                    compra.setGravado(compra.getGravado() - cf.getGravado());
                    compra.setImpuesto(compra.getImpuesto() - cf.getImpuesto());
                    compra.setIva(compra.getIva() - cf.getIva());
                    compra.setTotal(compra.getTotal() - cf.getTotal());
                    if (compra.getTotal() < 0.0) {
                        contadorCompras += 1;
                        if (contadorCompras > ultimoCompras - 1) {
                            contadorCompras = 0;
                        } else {
                            compra = compras.get(contadorCompras);
                        }
                    }
                }
                if (totalFacturas > limiteFacturar) {
                    repetir = false;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "NO HAY COMPRAS DISPONIBLES");
            nuevas_facturas = null;
        }
        
     */

}
